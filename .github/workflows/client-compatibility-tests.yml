name: CCIP Client Compatibility Tests
on:
  merge_group:
  pull_request:
  push:
    tags:
      - "*"
  workflow_dispatch:

env:
  CHAINLINK_IMAGE: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com/chainlink
  INTERNAL_DOCKER_REPO: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ secrets.QA_AWS_REGION }}.amazonaws.com
  MOD_CACHE_VERSION: 2

jobs:
  # Build Test Dependencies

  changes:
    environment: integration
    name: Check Paths That Require Tests To Run
    runs-on: ubuntu-latest
    # We don't directly merge dependabot PRs, so let's not waste the resources
    if: github.actor != 'dependabot[bot]'
    steps:
      - name: Checkout the repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          repository: smartcontractkit/ccip
          ref: ${{ inputs.cl_ref }}
      - uses: dorny/paths-filter@0bc4621a3135347011ad047f9ecf449bf72ce2bd # v3.0.0
        id: changes
        with:
          filters: |
            src:
              - '**/*.go'
              - '**/*go.sum'
              - '**/*go.mod'
              - '.github/workflows/integration-tests.yml'
              - '**/*Dockerfile'
              - 'core/**/config/**/*.toml'
              - 'integration-tests/**/*.toml'
      - name: Collect Metrics
        if: always()
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@0281b09807758be1dcc41651e44e62b353808c47 # v2.1.0
        with:
          org-id: ${{ secrets.GRAFANA_INTERNAL_TENANT_ID }}
          basic-auth: ${{ secrets.GRAFANA_INTERNAL_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_INTERNAL_HOST }}
          this-job-name: Check Paths That Require Tests To Run
        continue-on-error: true
    outputs:
      src: ${{ inputs.set_changes_output || steps.changes.outputs.src }}

  build-chainlink:
    if: needs.changes.outputs.src == 'true' || github.event_name == 'workflow_dispatch'
    needs: [ changes ]
    environment: integration
    permissions:
      id-token: write
      contents: read
    name: Build Chainlink Image
    runs-on: ubuntu-latest
    steps:
      - name: Collect Metrics
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@dea9b546553cb4ca936607c2267a09c004e4ab3f # v3.0.0
        with:
          id: client-compatablility-build-chainlink
          org-id: ${{ secrets.GRAFANA_INTERNAL_TENANT_ID }}
          basic-auth: ${{ secrets.GRAFANA_INTERNAL_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_INTERNAL_HOST }}
          this-job-name: Build Chainlink Image
        continue-on-error: true
      - name: Checkout the repo
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          repository: smartcontractkit/ccip
          ref: ${{ github.event.pull_request.head.sha || github.event.merge_group.head_sha }}
      - name: Build Chainlink Image
        uses: ./.github/actions/build-chainlink-image
        with:
          tag_suffix: ""
          dockerfile: core/chainlink.Dockerfile
          git_commit_sha: ${{ github.sha }}
          AWS_REGION: ${{ secrets.QA_AWS_REGION }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}

  get-latest-available-images:
    if: needs.changes.outputs.src == 'true' || github.event_name == 'workflow_dispatch'
    needs: [ changes ]
    environment: integration
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      geth_tag: ${{ env.GETH_TAG }}
      nethermind_tag: ${{ env.NETHERMIND_TAG }}
      besu_tag: ${{ env.BESU_TAG }}
      erigon_tag: ${{ env.ERIGON_TAG }}
    steps:
      - # Setup AWS creds
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a # v4.0.1
          with:
            aws-region: ${{ secrets.QA_AWS_REGION }}
            role-to-assume: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
            role-duration-seconds: 3600
        # Login to ECR
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
          with:
            mask-password: 'true'
          env:
            AWS_REGION: ${{ secrets.QA_AWS_REGION }}
        - name: Get latest docker images from ECR
          run: |
            geth_tag=$(aws ecr describe-images --repository-name ethereum/client-go --region ${{ secrets.QA_AWS_REGION }} --query 'sort_by(imageDetails,& imageTags[0])[-10:]' --output json | jq -r '[.[] | .imageTags[] | {original: ., numeric: (ltrimstr("v") | (split(".") + ["0","0"])[:3] | map(tonumber) | .[0]*10000 + .[1]*100 + .[2])}] | max_by(.numeric) | .original')
            echo "GETH_TAG=$geth_tag" >> $GITHUB_ENV
            echo "Geth latest tag: $geth_tag"
            nethermind_tag=$(aws ecr describe-images --repository-name nethermind/nethermind --region ${{ secrets.QA_AWS_REGION }} --query 'sort_by(imageDetails,& imageTags[0])[-10:]' --output json | jq -r '[.[] | .imageTags[] | {original: ., numeric: (ltrimstr("v") | (split(".") + ["0","0"])[:3] | map(tonumber) | .[0]*10000 + .[1]*100 + .[2])}] | max_by(.numeric) | .original')
            echo "NETHERMIND_TAG=$nethermind_tag" >> $GITHUB_ENV
            echo "Nethermind latest tag: $nethermind_tag"
            besu_tag=$(aws ecr describe-images --repository-name hyperledger/besu --region ${{ secrets.QA_AWS_REGION }} --query 'sort_by(imageDetails,& imageTags[0])[-10:]' --output json | jq -r '[.[] | .imageTags[] | {original: ., numeric: (ltrimstr("v") | (split(".") + ["0","0"])[:3] | map(tonumber) | .[0]*10000 + .[1]*100 + .[2])}] | max_by(.numeric) | .original')
            echo "BESU_TAG=$besu_tag" >> $GITHUB_ENV
            echo "Besu latest tag: $besu_tag"
            erigon_tag=$(aws ecr describe-images --repository-name thorax/erigon --region ${{ secrets.QA_AWS_REGION }} --query 'sort_by(imageDetails,& imageTags[0])[-10:]' --output json |jq -r '[.[] | .imageTags[] | {original: ., numeric: (ltrimstr("v") | (split(".") + ["0","0"])[:3] | map(tonumber) | .[0]*10000 + .[1]*100 + .[2])}] | max_by(.numeric) | .original')
            echo "ERIGON_TAG=$erigon_tag" >> $GITHUB_ENV
            echo "Erigon latest tag: $erigon_tag"
      - name: Collect Metrics
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@dea9b546553cb4ca936607c2267a09c004e4ab3f # v3.0.0
        with:
          id: client-compatablility-build-tests
          org-id: ${{ secrets.GRAFANA_INTERNAL_TENANT_ID }}
          basic-auth: ${{ secrets.GRAFANA_INTERNAL_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_INTERNAL_HOST }}
          this-job-name: Build Tests Binary
        continue-on-error: true
      - name: Checkout the repo
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.merge_group.head_sha }}
      - name: Build Tests
        uses: smartcontractkit/chainlink-github-actions/chainlink-testing-framework/build-tests@7882cf348cd6a1f6bcf1ee8280185584ebba96e9 # v2.3.10
        with:
          test_download_vendor_packages_command: cd ./integration-tests && go mod download
          token: ${{ secrets.GITHUB_TOKEN }}
          go_mod_path: ./integration-tests/go.mod
          go_tags: embed
          cache_key_id: core-e2e-${{ env.MOD_CACHE_VERSION }}
          cache_restore_only: "true"
          binary_name: tests

  # End Build Test Dependencies

  evm-compatibility-matrix:
    environment: integration
    permissions:
      checks: write
      pull-requests: write
      id-token: write
      contents: read
    needs: [ build-chainlink, changes, get-latest-available-images ]
    if: needs.changes.outputs.src == 'true' || github.event_name == 'workflow_dispatch'
    env:
      SELECTED_NETWORKS: SIMULATED_1,SIMULATED_2
      CHAINLINK_COMMIT_SHA: ${{ github.sha }}
      CHAINLINK_ENV_USER: ${{ github.actor }}
      TEST_LOG_LEVEL: debug
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: bidirectionallane-geth
            os: ubuntu-latest
            test: TestSmokeCCIPForBidirectionalLane
            client: geth
            timeout: 30m
            pyroscope_env: ci-smoke-ocr-geth-simulated
          - name: ocr-nethermind
            test: TestOCRBasic
            file: ocr
            client: nethermind
            timeout: 30m
            pyroscope_env: ci-smoke-ocr-nethermind-simulated
          # Will fail until https://github.com/hyperledger/besu/pull/6702 is merged and released
          # - name: ocr-besu
          #   test: TestOCRBasic
          #   file: ocr
          #   client: besu
          #   timeout: 30m
          #   pyroscope_env: ci-smoke-ocr-besu-simulated
          - name: ocr-erigon
            test: TestOCRBasic
            file: ocr
            client: erigon
            timeout: 30m
            pyroscope_env: ci-smoke-ocr-erigon-simulated
          - name: ocr2-geth
            test: "^TestOCRv2Basic/plugins$"
            file: ocr2
            client: geth
            timeout: 30m
            pyroscope_env: ci-smoke-ocr2-geth-simulated
          - name: ocr2-nethermind
            test: "^TestOCRv2Basic/plugins$"
            file: ocr2
            client: nethermind
            timeout: 30m
            pyroscope_env: ci-smoke-nethermind-evm-simulated
          # Will fail until https://github.com/hyperledger/besu/pull/6702 is merged and released
          # - name: ocr2-besu
          #   test: "^TestOCRv2Basic/plugins$"
          #   file: ocr2
          #   client: besu
          #   timeout: 30m
            # pyroscope_env: ci-smoke-ocr2-besu-simulated
          - name: ocr2-erigon
            test: "^TestOCRv2Basic/plugins$"
            file: ocr2
            client: erigon
            timeout: 60m
            pyroscope_env: ci-smoke-ocr2-erigon-simulated
    runs-on: ubuntu-latest
    name: CCIP Latest EVM Node Compatibility Test with ${{ matrix.client }}
    steps:
      - name: Download Tests Binary
        uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 # v4.1.4
        with:
          repository: smartcontractkit/ccip
          ref: ${{ github.event.pull_request.head.sha || github.event.merge_group.head_sha }}
      - name: Build Go Test Command
        id: build-go-test-command
        run: |
          # if the matrix.test is set, use it for a different command
          if [ "${{ matrix.test }}" != "" ]; then
            echo "run_command=-run '^${{ matrix.test }}$' ./ccip-tests/smoke/ccip_test.go" >> "$GITHUB_OUTPUT"
          else
            echo "run_command=./ccip-tests/smoke/ccip_test.go" >> "$GITHUB_OUTPUT"
          fi

          if [ -n "$PYROSCOPE_SERVER" ]; then
            pyroscope_enabled=true
          else
            pyroscope_enabled=false
          fi

          cat << EOF > config.toml
          [Network]
          selected_networks=$selected_networks

          [ChainlinkImage]
          image="$CHAINLINK_IMAGE"
          version="$CHAINLINK_VERSION"

          [Pyroscope]
          enabled=$pyroscope_enabled
          server_url="$PYROSCOPE_SERVER"
          environment="$PYROSCOPE_ENVIRONMENT"
          key_secret="$PYROSCOPE_KEY"

          [PrivateEthereumNetwork]
          ethereum_version="eth2"
          consensus_layer="prysm"
          execution_layer="$execution_layer"
          wait_for_finalization=false

          [PrivateEthereumNetwork.EthereumChainConfig]
          chain_id=1337
          genesis_delay=15
          seconds_per_slot=3
          validator_count=8
          slots_per_epoch=2
          addresses_to_fund=["0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"]
          EOF

          BASE64_CONFIG_OVERRIDE=$(cat config.toml | base64 -w 0)
          echo ::add-mask::$BASE64_CONFIG_OVERRIDE
          echo "BASE64_CONFIG_OVERRIDE=$BASE64_CONFIG_OVERRIDE" >> $GITHUB_ENV
          touch .root_dir
      - name: Run Tests
        uses: smartcontractkit/chainlink-github-actions/chainlink-testing-framework/run-tests@7882cf348cd6a1f6bcf1ee8280185584ebba96e9 # v2.3.10
        with:
          test_command_to_run: cd ./integration-tests && go test -timeout 30m -count=1 -json -test.parallel=2 ${{ steps.build-go-test-command.outputs.run_command }} 2>&1 | tee /tmp/gotest.log | gotestfmt
          test_download_vendor_packages_command: cd ./integration-tests && go mod download
          cl_repo: ${{ env.CHAINLINK_IMAGE }}
          cl_image_tag: ${{ github.sha }}
          aws_registries: ${{ secrets.QA_AWS_ACCOUNT_NUMBER }}
          artifacts_name: ${{ matrix.client }}-test-logs
          artifacts_location: |
            ./integration-tests/smoke/logs/
            ./integration-tests/ccip-tests/smoke/logs/*
          publish_check_name: ${{ matrix.name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          go_mod_path: ./integration-tests/go.mod
          cache_key_id: core-e2e-${{ env.MOD_CACHE_VERSION }}
          cache_restore_only: "true"
          QA_AWS_REGION: ${{ secrets.QA_AWS_REGION }}
          QA_AWS_ROLE_TO_ASSUME: ${{ secrets.QA_AWS_ROLE_TO_ASSUME }}
          QA_KUBECONFIG: ""
          should_tidy: "false"
      - name: Print failed test summary
        if: always()
        uses: smartcontractkit/chainlink-github-actions/chainlink-testing-framework/show-test-summary@c67a09566412d153ff7640d99f96b43aa03abc04 # v2.3.6
        with:
          test_directory: ./integration-tests/smoke/

  start-slack-thread:
    name: Start Slack Thread
    if: ${{ always() && (needs.changes.outputs.src == 'true' || github.event_name == 'workflow_dispatch') && needs.*.result != 'skipped' && needs.*.result != 'cancelled' }}
    environment: integration
    outputs:
      thread_ts: ${{ steps.slack.outputs.thread_ts }}
    permissions:
      checks: write
      pull-requests: write
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    needs: [ evm-compatibility-matrix, changes ]
    steps:
      - name: Debug Result
        run: echo ${{ join(needs.*.result, ',') }}
      - name: Main Slack Notification
        uses: slackapi/slack-github-action@6c661ce58804a1a20f6dc5fbee7f0381b469e001 # v1.25.0
        id: slack
        with:
          channel-id: ${{ secrets.QA_SLACK_CHANNEL }}
          payload: |
            {
              "attachments": [
                {
                  "color": "${{ contains(join(needs.*.result, ','), 'failure') && '#C62828' || '#2E7D32' }}",
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": "CCIP EVM Node Compatability Test Results ${{ contains(join(needs.*.result, ','), 'failure') && ':x:' || ':white_check_mark:'}}",
                        "emoji": true
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "${{ contains(join(needs.*.result, ','), 'failure') && 'Some tests failed, notifying <@U060CGGPY8H> & <@U03GWA0NSF7>' || 'All Good!' }}"
                      }
                    },
                    {
                      "type": "divider"
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "<${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}|${{ github.ref_name }}> | <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}> | <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Run>"
                      }
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.QA_SLACK_API_KEY }}

  post-test-results-to-slack:
    name: Post Test Results for ${{matrix.client}}
    if: ${{ always() && needs.*.result != 'skipped' && needs.*.result != 'cancelled' }}
    environment: integration
    permissions:
      checks: write
      pull-requests: write
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    needs: [ start-slack-thread ]
    steps:
      - name: Checkout the repo
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.merge_group.head_sha }}
      - name: Post Test Results to Slack
        uses: ./.github/actions/notify-slack-jobs-result
        with:
          github_token: ${{ github.token }}
          github_repository: ${{ github.repository }}
          workflow_run_id: ${{ github.run_id }}
          github_job_name_regex: ^CCIP Latest EVM Node Compatibility Test with (?<cap>.*?)$
          message_title: BiDirectional Lane Test Results
          slack_channel_id: ${{ secrets.QA_SLACK_CHANNEL }}
          slack_bot_token: ${{ secrets.QA_SLACK_API_KEY }}
          slack_thread_ts: ${{ needs.start-slack-thread.outputs.thread_ts }}
