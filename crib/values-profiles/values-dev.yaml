tags:
  # Enable BlockScout Stack.
  blockscout: true
blockscout-stack1: &default_blockscout_stack_config
  blockscout:
    image:
      repository: "389435844244.dkr.ecr.us-west-2.amazonaws.com/blockscout-internal"
      pullPolicy: IfNotPresent
      tag: "pr-14"
    env:
      DATABASE_URL: "postgres://postgres:verylongdatabasepassword@app-blockscout-stack1-db:5432/blockscout"
      DATABASE_HOST: "app-blockscout-stack1-db"
      ETHEREUM_JSONRPC_HTTP_URL: "http://geth-1337:8544"
      ETHEREUM_JSONRPC_WS_URL: "ws://geth-1337:8546"
      ETHEREUM_JSONRPC_HTTP_INSECURE: "true"
      BLOCKSCOUT_PROTOCOL: "HTTPS"
      SECRET_KEY_BASE: "knilniahc"
    init:
      enabled: true
      command:
        - /bin/sh
      args:
        - -c
        - |
          until nc -z $DATABASE_HOST 5432; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done;
          echo "PostgreSQL is ready, starting BlockScout migrations...";
          bin/blockscout eval "Elixir.Explorer.ReleaseTasks.create_and_migrate()"
  frontend:
    env:
      NEXT_PUBLIC_API_HOST: "app-blockscout-stack1-blockscout-svc:80"
blockscout-stack2:
  <<: *default_blockscout_stack_config
  blockscout:
    env:
      DATABASE_URL: "postgres://postgres:verylongdatabasepassword@app-blockscout-stack2-db:5432/blockscout"
      DATABASE_HOST: "app-blockscout-stack2-db"
      ETHEREUM_JSONRPC_HTTP_URL: "http://geth-2337:8544"
      ETHEREUM_JSONRPC_WS_URL: "ws://geth-2337:8546"
  frontend:
    env:
      NEXT_PUBLIC_API_HOST: "app-blockscout-stack2-blockscout-svc:80"
blockscout-stack1-db: &default_blockscout_db_config
  auth:
    # For the `postgres` user.
    postgresPassword: verylongdatabasepassword
    database: blockscout
  primary:
    resources:
      requests:
        cpu: 2
        memory: 512Mi
      limits:
        cpu: 3
        memory: 1024Mi
    extendedConfiguration: |
      max_connections = 500

blockscout-stack2-db:
  <<: *default_blockscout_db_config
chainlink:
  global:
    overridesToml: |-
      [Feature]
      LogPoller = true
      [Log]
      Level = 'debug'
      JSONConsole = true
      [Log.File]
      MaxSize = '0b'
      [WebServer]
      AllowOrigins = '*'
      HTTPPort = 6688
      SecureCookies = false
      HTTPWriteTimeout = '1m'
      [WebServer.RateLimit]
      Authenticated = 2000
      Unauthenticated = 1000
      [WebServer.TLS]
      HTTPSPort = 0
      [Database]
      MaxIdleConns = 50
      MaxOpenConns = 50
      MigrateOnStartup = true
      [OCR2]
      Enabled = true
      DefaultTransactionQueueDepth = 0
      [OCR]
      Enabled = false
      DefaultTransactionQueueDepth = 0
      [P2P]
      [P2P.V2]
      Enabled = true
      ListenAddresses = ['0.0.0.0:6690']
      AnnounceAddresses = ['0.0.0.0:6690']
      DeltaDial = '500ms'
      DeltaReconcile = '5s'
  securityContext:
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 14933
    runAsGroup: 999
  web_port: 6688
  p2p_port: 6690
  # extraEnvVars:
  # "CL_MEDIAN_CMD": "chainlink-feeds"
  nodes:
    - name: node-1
      image: ${runtime.images.app}
      # default resources are 300m/1Gi
      # first node need more resources to build faster inside container
      # at least 2Gi of memory is required otherwise build will fail (OOM)
      resources:
        requests:
          cpu: 2000m
          memory: 2048Mi
        limits:
          cpu: 2000m
          memory: 2048Mi
      # override default config per node
      # for example, use OCRv2 P2P setup, the whole config
      #      toml: |
      #        RootDir = './clroot'
      #        [Log]
      #        JSONConsole = true
      #        Level = 'debug'
      #        [WebServer]
      #        AllowOrigins = '*'
      #        SecureCookies = false
      #        SessionTimeout = '999h0m0s'
      #        [OCR2]
      #        Enabled = true
      #        [P2P]
      #        [P2P.V2]
      #        Enabled = false
      #        AnnounceAddresses = []
      #        DefaultBootstrappers = []
      #        DeltaDial = '15s'
      #        DeltaReconcile = '1m0s'
      #        ListenAddresses = []
      #        [[EVM]]
      #        ChainID = '1337'
      #        MinContractPayment = '0'
      #        [[EVM.Nodes]]
      #        Name = 'node-0'
      #        WSURL = 'ws://geth:8546'
      #        HTTPURL = 'http://geth:8544'
      #        [WebServer.TLS]
      #        HTTPSPort = 0
      # or use overridesToml to override some part of configuration
      # overridesToml: |
      # Enable Tracing
      #   [Tracing]
      #   Enabled = true
      #   SamplingRatio = 1.0
      #   CollectorTarget = 'app-opentelemetry-collector:4317'
      #   TLSCertPath = ''
      #   Mode = 'unencrypted'
    - name: node-2
      image: ${runtime.images.app}
    - name: node-3
      image: ${runtime.images.app}
    - name: node-4
      image: ${runtime.images.app}
    - name: node-5
      image: ${runtime.images.app}
